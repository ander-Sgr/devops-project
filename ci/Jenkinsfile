pipeline {
    agent any

    environment {
        REGISTRY = 'andersgr'
        IMAGE_NAME = 'env-image'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    echo "Current branch: ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Test') {
            agent {
                docker { 
                    image 'envdev:latest'
                    args '-v $PWD:/workspace -w /workspace'
                }
            }
            steps {
                sh 'pip install -r requirements.txt'
                sh 'pytest --cov=app tests/'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def app = docker.build("${REGISTRY}/${IMAGE_NAME}:${env.BUILD_NUMBER}", ".")
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression {
                    return env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def app = docker.image("${REGISTRY}/${IMAGE_NAME}:${env.BUILD_NUMBER}")
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
        success {
            echo "Pipeline succeeded."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
